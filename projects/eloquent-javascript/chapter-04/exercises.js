////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step=1){
  //output
  let output = [];
  //if start = end
  if(start === end){
    return output;
  }
  if(step > 0){// positive step
    //loop
    for(let i = start; i <= end; i += step){
      output.push(i);// push
    }
  } else {// negative step
    //reverse loop
    for(let i = start; i >= end; i += step){
      output.push(i);// push
    }
  }
  return output;// return
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array, n=0) {
  // if n is equal to array length
  if (n === array.length) {
    return 0;// return 0
  }
  return array[n] + sum(array, n + 1);// return array index plus func call, n increment
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  //output
  let output = [];
  //reverse loop
  for(let i = array.length - 1; i >= 0; i--) {
    output.push(array[i]);// push
  }
  return output;// return
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  //loop
  for (let i = 0; i < Math.floor(array.length / 2); i++) {
    //storage
    let storage = array[i];
    array[i] = array[array.length - 1 - i];//reassign element to last element
    array[array.length - 1 - i] = storage;// replace last element with stored element
  }
  return array;//return
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;

  for(let i = array.length -1; i >= 0; i--){
    rest = {value: array[i], rest: rest};
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, output=[]) {
  //base
  if(list.rest === null){
    output.push(list.value);//if rest is null, push last value
    return output;//return
  }
  //recursion
    //grab current value at [value] and add to array
  output.push(list.value);

  //return func call with rest and output
  return listToArray(list.rest, output);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
